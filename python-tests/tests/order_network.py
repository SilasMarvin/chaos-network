import torch as torch
import torch.nn as nn


nll = nn.NLLLoss()
log_softmax = nn.LogSoftmax(dim=0)
mish = nn.Mish()


def test_forward_batch_1():
    w1 = torch.tensor(0.1, dtype=torch.float64, requires_grad=True)
    w2 = torch.tensor(0.2, dtype=torch.float64, requires_grad=True)
    w3 = torch.tensor(0.3, dtype=torch.float64, requires_grad=True)
    w4 = torch.tensor(0.4, dtype=torch.float64, requires_grad=True)
    w5 = torch.tensor(0.5, dtype=torch.float64, requires_grad=True)
    w6 = torch.tensor(0.6, dtype=torch.float64, requires_grad=True)
    
    # First forward pass
    in1 = torch.tensor(0.1, dtype=torch.float64, requires_grad=False)
    in2 = torch.tensor(0.2, dtype=torch.float64, requires_grad=False)
    out1 = mish(w1 * in1 + w3 * in2 + w5)
    out2 = mish(w2 * in1 + w4 * in2 + w6)
    output = torch.cat((out1.reshape(1), out2.reshape(1)))
    print("Forward Output: ", output)
    starting_grads = torch.tensor([0.13, 0.14])
    output.backward(starting_grads)
    print("W1: Grad: ", w1.grad)
    print("W2: Grad: ", w2.grad)
    print("W3: Grad: ", w3.grad)
    print("W4: Grad: ", w4.grad)
    print("W5: Grad: ", w5.grad)
    print("W6: Grad: ", w6.grad)

    # Reset grads
    w1.grad = None
    w2.grad = None
    w3.grad = None
    w4.grad = None
    w5.grad = None
    w6.grad = None

    # Second forward pass
    in1 = torch.tensor(0.2, dtype=torch.float64, requires_grad=False)
    in2 = torch.tensor(0.3, dtype=torch.float64, requires_grad=False)
    out1 = mish(w1 * in1 + w3 * in2 + w5)
    out2 = mish(w2 * in1 + w4 * in2 + w6)
    output = torch.cat((out1.reshape(1), out2.reshape(1)))
    print("Forward Output: ", output)
    starting_grads = torch.tensor([0.14, 0.15])
    output.backward(starting_grads)
    print("W1: Grad: ", w1.grad)
    print("W2: Grad: ", w2.grad)
    print("W3: Grad: ", w3.grad)
    print("W4: Grad: ", w4.grad)
    print("W5: Grad: ", w5.grad)
    print("W6: Grad: ", w6.grad)
# test_forward_batch_1()


def test_forward_batch_2():
    w1 = torch.tensor(0.1, dtype=torch.float64, requires_grad=True)
    w2 = torch.tensor(0.2, dtype=torch.float64, requires_grad=True)
    w3 = torch.tensor(0.3, dtype=torch.float64, requires_grad=True)
    w4 = torch.tensor(0.4, dtype=torch.float64, requires_grad=True)
    w5 = torch.tensor(0.5, dtype=torch.float64, requires_grad=True)
    w6 = torch.tensor(0.6, dtype=torch.float64, requires_grad=True)
    w7 = torch.tensor(0.7, dtype=torch.float64, requires_grad=True)
    w8 = torch.tensor(0.8, dtype=torch.float64, requires_grad=True)
    w9 = torch.tensor(0.9, dtype=torch.float64, requires_grad=True)
    w10 = torch.tensor(0.1, dtype=torch.float64, requires_grad=True)
    w11 = torch.tensor(0.2, dtype=torch.float64, requires_grad=True)
    w12 = torch.tensor(0.3, dtype=torch.float64, requires_grad=True)
    w13 = torch.tensor(0.4, dtype=torch.float64, requires_grad=True)
    w14 = torch.tensor(0.5, dtype=torch.float64, requires_grad=True)
    
    # First forward pass
    in1 = torch.tensor(0.1, dtype=torch.float64, requires_grad=False)
    in2 = torch.tensor(0.2, dtype=torch.float64, requires_grad=False)
    norm1 = mish(w1 * in1 + w4 * in2 + w7)
    norm2 = mish(w2 * in1 + w5 * in2 + w10)
    out1 = mish(w3 * in1 + w8 * norm1 + w11 * norm2 + w13)
    out2 = mish(w6 * in2 + w9 * norm1 + w12 * norm2 + w14)
    output = torch.cat((out1.reshape(1), out2.reshape(1)))
    print("Forward Output: ", output)
    starting_grads = torch.tensor([0.13, 0.14])
    output.backward(starting_grads)
    print("W1: Grad: ", w1.grad)
    print("W2: Grad: ", w2.grad)
    print("W3: Grad: ", w3.grad)
    print("W4: Grad: ", w4.grad)
    print("W5: Grad: ", w5.grad)
    print("W6: Grad: ", w6.grad)
    print("W7: Grad: ", w7.grad)
    print("W8: Grad: ", w8.grad)
    print("W9: Grad: ", w9.grad)
    print("W10: Grad: ", w10.grad)
    print("W11: Grad: ", w11.grad)
    print("W12: Grad: ", w12.grad)
    print("W13: Grad: ", w13.grad)
    print("W14: Grad: ", w14.grad)
test_forward_batch_2()

def test_forward_batch_3():
    w1 = torch.tensor(0.1, dtype=torch.float64, requires_grad=True)
    w2 = torch.tensor(0.2, dtype=torch.float64, requires_grad=True)
    w3 = torch.tensor(0.3, dtype=torch.float64, requires_grad=True)
    w4 = torch.tensor(0.4, dtype=torch.float64, requires_grad=True)
    w5 = torch.tensor(0.5, dtype=torch.float64, requires_grad=True)
    w6 = torch.tensor(0.6, dtype=torch.float64, requires_grad=True)
    w7 = torch.tensor(0.7, dtype=torch.float64, requires_grad=True)
    w8 = torch.tensor(0.8, dtype=torch.float64, requires_grad=True)
    w9 = torch.tensor(0.9, dtype=torch.float64, requires_grad=True)
    w10 = torch.tensor(0.1, dtype=torch.float64, requires_grad=True)
    w11 = torch.tensor(0.2, dtype=torch.float64, requires_grad=True)
    w12 = torch.tensor(0.3, dtype=torch.float64, requires_grad=True)
    w13 = torch.tensor(0.4, dtype=torch.float64, requires_grad=True)
    w14 = torch.tensor(0.5, dtype=torch.float64, requires_grad=True)
    w15 = torch.tensor(0.6, dtype=torch.float64, requires_grad=True)
    w16 = torch.tensor(0.7, dtype=torch.float64, requires_grad=True)
    w17 = torch.tensor(0.8, dtype=torch.float64, requires_grad=True)
    w18 = torch.tensor(0.9, dtype=torch.float64, requires_grad=True)
    w19 = torch.tensor(0.1, dtype=torch.float64, requires_grad=True)
    
    # First forward pass
    in1 = torch.tensor(0.1, dtype=torch.float64, requires_grad=False)
    in2 = torch.tensor(0.2, dtype=torch.float64, requires_grad=False)
    norm1 = mish(w1 * in1 + w4 * in2 + w7)
    norm2 = mish(w2 * in1 + w5 * in2 + w11)
    norm3 = mish(w10 * norm1 + w14 * norm2 + w15)
    out1 = mish(w3 * in1 + w8 * norm1 + w12 * norm2 + norm3 * w16 + w18)
    out2 = mish(w6 * in2 + w9 * norm1 + w13 * norm2 + norm3 * w17 + w19)
    output = torch.cat((out1.reshape(1), out2.reshape(1)))
    print("Forward Output: ", output)
    starting_grads = torch.tensor([0.13, 0.14])
    output.backward(starting_grads)
    print("W1: Grad: ", w1.grad)
    print("W2: Grad: ", w2.grad)
    print("W3: Grad: ", w3.grad)
    print("W4: Grad: ", w4.grad)
    print("W5: Grad: ", w5.grad)
    print("W6: Grad: ", w6.grad)
    print("W7: Grad: ", w7.grad)
    print("W8: Grad: ", w8.grad)
    print("W9: Grad: ", w9.grad)
    print("W10: Grad: ", w10.grad)
    print("W11: Grad: ", w11.grad)
    print("W12: Grad: ", w12.grad)
    print("W13: Grad: ", w13.grad)
    print("W14: Grad: ", w14.grad)
    print("W15: Grad: ", w15.grad)
    print("W16: Grad: ", w16.grad)
    print("W17: Grad: ", w17.grad)
    print("W18: Grad: ", w18.grad)
    print("W19: Grad: ", w19.grad)
# test_forward_batch_3()
